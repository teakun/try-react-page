{"version":3,"sources":["Component/AppCard.tsx","containers/AppListContainer.tsx","serviceWorker.ts","index.tsx"],"names":["AppCard","props","className","src","this","item","image","title","description","React","Component","AppListContainer","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NA2BeA,E,YAvBb,WAAYC,GAAsB,qEAC1BA,I,sEAIN,OACE,yBAAKC,UAAU,YACb,uBAAGA,UAAU,aACX,yBAAKC,IAAKC,KAAKH,MAAMI,KAAKC,SAE5B,yBAAKJ,UAAU,eACb,yBAAKA,UAAU,aACZE,KAAKH,MAAMI,KAAKE,OAEnB,yBAAKL,UAAU,mBACZE,KAAKH,MAAMI,KAAKG,mB,GAhBPC,IAAMC,WC6BbC,E,iLAdX,OACE,yBAAKT,UAAU,YAVU,CACzB,CAAEK,MAAO,iCAASC,YAAa,+GAAsBF,MAAO,yGAC5D,CAAEC,MAAO,uCAAUC,YAAa,mOAAgDF,MAAO,yGACvF,CAAEC,MAAO,+DAAcC,YAAa,2bAA+EF,MAAO,yGAC1H,CAAEC,MAAO,iCAASC,YAAa,+GAAsBF,MAAO,yGAC5D,CAAEC,MAAO,uCAAUC,YAAa,mOAAgDF,MAAO,yGACvF,CAAEC,MAAO,+DAAcC,YAAa,+gBAA6FF,MAAO,0GAK7HM,KAAI,SAAAP,GACX,OACE,kBAAC,EAAD,CACEA,KAAMA,Y,GAjBWK,aCMXG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAAsBC,SAASC,eAAe,SDmIxD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.50c27ce3.chunk.js","sourcesContent":["import React from 'react';\nimport { AppItem, AppCardProps } from '../Interface/AppItem'\n\nclass AppCard extends React.Component<AppCardProps> {\n  constructor(props: AppCardProps) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className='app-item'>\n        <p className='app-image'>\n          <img src={this.props.item.image} />\n        </p>\n        <div className='app-content'>\n          <div className='app-title'>\n            {this.props.item.title}\n          </div>\n          <div className='app-description'>\n            {this.props.item.description}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default AppCard;\n","import React, { Component } from 'react';\n// import AppCard from '../Component/AppCard';\n\nimport AppCard from '../Component/AppCard';\nimport { AppItem, AppCardProps } from '../Interface/AppItem'\n\nclass AppListContainer extends Component {\n\n  render() {\n    const appList: AppItem[] = [\n      { title: 'あみだくじ', description: '人数選択可能なあみだくじアプリです。', image: 'https://pbs.twimg.com/profile_images/378800000721346531/6d9dac9671307c381c2491f604d98806_400x400.jpeg' },\n      { title: '回文メーカー', description: '入力した文字から自動で回文を作成します。 完成した回文はTwitterで共有しましょう！', image: 'https://pbs.twimg.com/profile_images/378800000721346531/6d9dac9671307c381c2491f604d98806_400x400.jpeg' },\n      { title: 'よけろ！モモンガくん', description: '平和な森が突如リンゴの大群に襲われた！ 森の危機に今モモンガくんが立ち上がる… 画面をタップしてモモンガを左右に移動させ、迫り来るリンゴを避けきろう！', image: 'https://pbs.twimg.com/profile_images/378800000721346531/6d9dac9671307c381c2491f604d98806_400x400.jpeg' },\n      { title: 'あみだくじ', description: '人数選択可能なあみだくじアプリです。', image: 'https://pbs.twimg.com/profile_images/378800000721346531/6d9dac9671307c381c2491f604d98806_400x400.jpeg' },\n      { title: '回文メーカー', description: '入力した文字から自動で回文を作成します。 完成した回文はTwitterで共有しましょう！', image: 'https://pbs.twimg.com/profile_images/378800000721346531/6d9dac9671307c381c2491f604d98806_400x400.jpeg' },\n      { title: 'よけろ！モモンガくん', description: '平和な森が突如リンゴの大群に襲われた！ 森の危機に今モモンガくんが立ち上がる… 画面をタップしてモモンガを左右に移動させ、迫り来るリンゴを避けきろううううううううううううううう！', image: 'https://pbs.twimg.com/profile_images/378800000721346531/6d9dac9671307c381c2491f604d98806_400x400.jpeg' },\n    ]\n\n    return (\n      <div className='app-list'>\n        {appList.map(item => {\n          return (\n            <AppCard\n              item={item}\n            />\n          );\n        })}\n      </div>\n    )\n  }\n}\n\nexport default AppListContainer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport AppListContainer from './containers/AppListContainer'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<AppListContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}